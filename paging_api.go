// Code generated by go generate; DO NOT EDIT.
// This file was generated at 2020-07-31 12:13:27.378218589 &#43;0200 CEST m=&#43;0.001316932

package bitbucket

import (
	"context"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PagingApiService provides paging for all paginated APIs
type PagingApiService service

// pageGet fetches the previous or next page for APIs that page results
func (a *PagingApiService) pageGet(ctx context.Context, pageURL string, successPayload interface{}) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	if pageURL == "" {
		return nil, reportError("The page URL is empty which means there is no next or previous page")
	}

	localVarHeaderParams := make(map[string]string)
	localVarFormParams := url.Values{}
	localVarQueryParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, pageURL, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}

	if err = json.NewDecoder(localVarHttpResponse.Body).Decode(&successPayload); err != nil {
		return localVarHttpResponse, err
	}

	return localVarHttpResponse, err
}

// BranchesPageGet is used to get the next or previous page of PaginatedBranches
func (a *PagingApiService) BranchesPageGet(ctx context.Context, pageURL string) (PaginatedBranches, *http.Response, error) {
	var successPayload PaginatedBranches

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// BranchrestrictionsPageGet is used to get the next or previous page of PaginatedBranchrestrictions
func (a *PagingApiService) BranchrestrictionsPageGet(ctx context.Context, pageURL string) (PaginatedBranchrestrictions, *http.Response, error) {
	var successPayload PaginatedBranchrestrictions

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// CommitCommentsPageGet is used to get the next or previous page of PaginatedCommitComments
func (a *PagingApiService) CommitCommentsPageGet(ctx context.Context, pageURL string) (PaginatedCommitComments, *http.Response, error) {
	var successPayload PaginatedCommitComments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// CommitstatusesPageGet is used to get the next or previous page of PaginatedCommitstatuses
func (a *PagingApiService) CommitstatusesPageGet(ctx context.Context, pageURL string) (PaginatedCommitstatuses, *http.Response, error) {
	var successPayload PaginatedCommitstatuses

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// ComponentsPageGet is used to get the next or previous page of PaginatedComponents
func (a *PagingApiService) ComponentsPageGet(ctx context.Context, pageURL string) (PaginatedComponents, *http.Response, error) {
	var successPayload PaginatedComponents

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// DeployKeysPageGet is used to get the next or previous page of PaginatedDeployKeys
func (a *PagingApiService) DeployKeysPageGet(ctx context.Context, pageURL string) (PaginatedDeployKeys, *http.Response, error) {
	var successPayload PaginatedDeployKeys

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// DeploymentsPageGet is used to get the next or previous page of PaginatedDeployments
func (a *PagingApiService) DeploymentsPageGet(ctx context.Context, pageURL string) (PaginatedDeployments, *http.Response, error) {
	var successPayload PaginatedDeployments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// DiffstatsPageGet is used to get the next or previous page of PaginatedDiffstats
func (a *PagingApiService) DiffstatsPageGet(ctx context.Context, pageURL string) (PaginatedDiffstats, *http.Response, error) {
	var successPayload PaginatedDiffstats

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// EnvironmentsPageGet is used to get the next or previous page of PaginatedEnvironments
func (a *PagingApiService) EnvironmentsPageGet(ctx context.Context, pageURL string) (PaginatedEnvironments, *http.Response, error) {
	var successPayload PaginatedEnvironments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// FilesPageGet is used to get the next or previous page of PaginatedFiles
func (a *PagingApiService) FilesPageGet(ctx context.Context, pageURL string) (PaginatedFiles, *http.Response, error) {
	var successPayload PaginatedFiles

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// HookEventsPageGet is used to get the next or previous page of PaginatedHookEvents
func (a *PagingApiService) HookEventsPageGet(ctx context.Context, pageURL string) (PaginatedHookEvents, *http.Response, error) {
	var successPayload PaginatedHookEvents

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// IssueAttachmentsPageGet is used to get the next or previous page of PaginatedIssueAttachments
func (a *PagingApiService) IssueAttachmentsPageGet(ctx context.Context, pageURL string) (PaginatedIssueAttachments, *http.Response, error) {
	var successPayload PaginatedIssueAttachments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// IssueCommentsPageGet is used to get the next or previous page of PaginatedIssueComments
func (a *PagingApiService) IssueCommentsPageGet(ctx context.Context, pageURL string) (PaginatedIssueComments, *http.Response, error) {
	var successPayload PaginatedIssueComments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// IssuesPageGet is used to get the next or previous page of PaginatedIssues
func (a *PagingApiService) IssuesPageGet(ctx context.Context, pageURL string) (PaginatedIssues, *http.Response, error) {
	var successPayload PaginatedIssues

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// LogEntriesPageGet is used to get the next or previous page of PaginatedLogEntries
func (a *PagingApiService) LogEntriesPageGet(ctx context.Context, pageURL string) (PaginatedLogEntries, *http.Response, error) {
	var successPayload PaginatedLogEntries

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// MilestonesPageGet is used to get the next or previous page of PaginatedMilestones
func (a *PagingApiService) MilestonesPageGet(ctx context.Context, pageURL string) (PaginatedMilestones, *http.Response, error) {
	var successPayload PaginatedMilestones

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PipelineKnownHostsPageGet is used to get the next or previous page of PaginatedPipelineKnownHosts
func (a *PagingApiService) PipelineKnownHostsPageGet(ctx context.Context, pageURL string) (PaginatedPipelineKnownHosts, *http.Response, error) {
	var successPayload PaginatedPipelineKnownHosts

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PipelineScheduleExecutionsPageGet is used to get the next or previous page of PaginatedPipelineScheduleExecutions
func (a *PagingApiService) PipelineScheduleExecutionsPageGet(ctx context.Context, pageURL string) (PaginatedPipelineScheduleExecutions, *http.Response, error) {
	var successPayload PaginatedPipelineScheduleExecutions

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PipelineSchedulesPageGet is used to get the next or previous page of PaginatedPipelineSchedules
func (a *PagingApiService) PipelineSchedulesPageGet(ctx context.Context, pageURL string) (PaginatedPipelineSchedules, *http.Response, error) {
	var successPayload PaginatedPipelineSchedules

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PipelineStepsPageGet is used to get the next or previous page of PaginatedPipelineSteps
func (a *PagingApiService) PipelineStepsPageGet(ctx context.Context, pageURL string) (PaginatedPipelineSteps, *http.Response, error) {
	var successPayload PaginatedPipelineSteps

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PipelineVariablesPageGet is used to get the next or previous page of PaginatedPipelineVariables
func (a *PagingApiService) PipelineVariablesPageGet(ctx context.Context, pageURL string) (PaginatedPipelineVariables, *http.Response, error) {
	var successPayload PaginatedPipelineVariables

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PipelinesPageGet is used to get the next or previous page of PaginatedPipelines
func (a *PagingApiService) PipelinesPageGet(ctx context.Context, pageURL string) (PaginatedPipelines, *http.Response, error) {
	var successPayload PaginatedPipelines

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// ProjectsPageGet is used to get the next or previous page of PaginatedProjects
func (a *PagingApiService) ProjectsPageGet(ctx context.Context, pageURL string) (PaginatedProjects, *http.Response, error) {
	var successPayload PaginatedProjects

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PullrequestCommentsPageGet is used to get the next or previous page of PaginatedPullrequestComments
func (a *PagingApiService) PullrequestCommentsPageGet(ctx context.Context, pageURL string) (PaginatedPullrequestComments, *http.Response, error) {
	var successPayload PaginatedPullrequestComments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// PullrequestsPageGet is used to get the next or previous page of PaginatedPullrequests
func (a *PagingApiService) PullrequestsPageGet(ctx context.Context, pageURL string) (PaginatedPullrequests, *http.Response, error) {
	var successPayload PaginatedPullrequests

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// RefsPageGet is used to get the next or previous page of PaginatedRefs
func (a *PagingApiService) RefsPageGet(ctx context.Context, pageURL string) (PaginatedRefs, *http.Response, error) {
	var successPayload PaginatedRefs

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// RepositoriesPageGet is used to get the next or previous page of PaginatedRepositories
func (a *PagingApiService) RepositoriesPageGet(ctx context.Context, pageURL string) (PaginatedRepositories, *http.Response, error) {
	var successPayload PaginatedRepositories

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// RepositoryPermissionsPageGet is used to get the next or previous page of PaginatedRepositoryPermissions
func (a *PagingApiService) RepositoryPermissionsPageGet(ctx context.Context, pageURL string) (PaginatedRepositoryPermissions, *http.Response, error) {
	var successPayload PaginatedRepositoryPermissions

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// SnippetCommentsPageGet is used to get the next or previous page of PaginatedSnippetComments
func (a *PagingApiService) SnippetCommentsPageGet(ctx context.Context, pageURL string) (PaginatedSnippetComments, *http.Response, error) {
	var successPayload PaginatedSnippetComments

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// SnippetCommitPageGet is used to get the next or previous page of PaginatedSnippetCommit
func (a *PagingApiService) SnippetCommitPageGet(ctx context.Context, pageURL string) (PaginatedSnippetCommit, *http.Response, error) {
	var successPayload PaginatedSnippetCommit

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// SnippetsPageGet is used to get the next or previous page of PaginatedSnippets
func (a *PagingApiService) SnippetsPageGet(ctx context.Context, pageURL string) (PaginatedSnippets, *http.Response, error) {
	var successPayload PaginatedSnippets

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// SshUserKeysPageGet is used to get the next or previous page of PaginatedSshUserKeys
func (a *PagingApiService) SshUserKeysPageGet(ctx context.Context, pageURL string) (PaginatedSshUserKeys, *http.Response, error) {
	var successPayload PaginatedSshUserKeys

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// TagsPageGet is used to get the next or previous page of PaginatedTags
func (a *PagingApiService) TagsPageGet(ctx context.Context, pageURL string) (PaginatedTags, *http.Response, error) {
	var successPayload PaginatedTags

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// TeamPermissionsPageGet is used to get the next or previous page of PaginatedTeamPermissions
func (a *PagingApiService) TeamPermissionsPageGet(ctx context.Context, pageURL string) (PaginatedTeamPermissions, *http.Response, error) {
	var successPayload PaginatedTeamPermissions

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// TeamsPageGet is used to get the next or previous page of PaginatedTeams
func (a *PagingApiService) TeamsPageGet(ctx context.Context, pageURL string) (PaginatedTeams, *http.Response, error) {
	var successPayload PaginatedTeams

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// TreeentriesPageGet is used to get the next or previous page of PaginatedTreeentries
func (a *PagingApiService) TreeentriesPageGet(ctx context.Context, pageURL string) (PaginatedTreeentries, *http.Response, error) {
	var successPayload PaginatedTreeentries

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// UsersPageGet is used to get the next or previous page of PaginatedUsers
func (a *PagingApiService) UsersPageGet(ctx context.Context, pageURL string) (PaginatedUsers, *http.Response, error) {
	var successPayload PaginatedUsers

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// VersionsPageGet is used to get the next or previous page of PaginatedVersions
func (a *PagingApiService) VersionsPageGet(ctx context.Context, pageURL string) (PaginatedVersions, *http.Response, error) {
	var successPayload PaginatedVersions

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}

// WebhookSubscriptionsPageGet is used to get the next or previous page of PaginatedWebhookSubscriptions
func (a *PagingApiService) WebhookSubscriptionsPageGet(ctx context.Context, pageURL string) (PaginatedWebhookSubscriptions, *http.Response, error) {
	var successPayload PaginatedWebhookSubscriptions

	resp, err := a.pageGet(ctx, pageURL, &successPayload)

	return successPayload, resp, err
}
